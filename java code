import java.util.*;

class Seat {
    int seatNumber;
    String berthType;
    String coach;
    boolean isBooked;
    String passengerName;

    public Seat(int seatNumber, String berthType, String coach) {
        this.seatNumber = seatNumber;
        this.berthType = berthType;
        this.coach = coach;
        this.isBooked = false;
        this.passengerName = null;
    }

    public void bookSeat(String passengerName) {
        this.isBooked = true;
        this.passengerName = passengerName;
    }

    public void cancelSeat() {
        this.isBooked = false;
        this.passengerName = null;
    }
}

class Train {
    int trainNumber;
    String trainName;
    String startStation;
    String endStation;
    Map<String, String> stationTimings;
    List<Seat> seats;
    Queue<String> waitingList;

    public Train(int trainNumber, String trainName, String startStation, String endStation, Map<String, String> stationTimings) {
        this.trainNumber = trainNumber;
        this.trainName = trainName;
        this.startStation = startStation;
        this.endStation = endStation;
        this.stationTimings = stationTimings;
        this.seats = new ArrayList<>();
        this.waitingList = new LinkedList<>();
        initializeSeats();
    }

    private void initializeSeats() {
        String[] berthTypes = {"Lower", "Middle", "Upper", "Side Lower", "Side Upper"};
        String[] coaches = {"S1", "S2", "S3", "S4", "S5", "S6", "S7", "S8", "S9", "S10"};
        int seatNumber = 1;

        for (String coach : coaches) {
            for (String berth : berthTypes) {
                seats.add(new Seat(seatNumber++, berth, coach));
                if (seatNumber > 50) break; // Each train has 50 seats
            }
        }
    }

    public void displayStatus() {
        System.out.println("\nTrain: " + trainName + " (" + trainNumber + ")");
        System.out.println("Route: " + startStation + " → " + endStation);
        System.out.println("\nTrain Timings:");
        for (Map.Entry<String, String> entry : stationTimings.entrySet()) {
            System.out.println("  " + entry.getKey() + " - " + entry.getValue());
        }

        long availableSeats = seats.stream().filter(seat -> !seat.isBooked).count();
        System.out.println("\nAvailable Seats: " + availableSeats);
        System.out.println("Waiting List: " + waitingList.size());
    }

    public void bookTicket(String passengerName) {
        for (Seat seat : seats) {
            if (!seat.isBooked) {
                seat.bookSeat(passengerName);
                System.out.println("Ticket booked! " + passengerName + " - Seat No: " + seat.seatNumber + " (" + seat.berthType + ") in " + seat.coach);
                return;
            }
        }
        System.out.println("No seats available. Adding " + passengerName + " to waiting list.");
        waitingList.add(passengerName);
    }

    public void cancelTicket(String passengerName) {
        for (Seat seat : seats) {
            if (seat.isBooked && seat.passengerName.equals(passengerName)) {
                seat.cancelSeat();
                System.out.println(passengerName + "'s ticket is cancelled. Seat No: " + seat.seatNumber + " is now free.");

                if (!waitingList.isEmpty()) {
                    String nextPassenger = waitingList.poll();
                    seat.bookSeat(nextPassenger);
                    System.out.println("Ticket confirmed for " + nextPassenger + ". Assigned Seat No: " + seat.seatNumber + " (" + seat.berthType + ") in " + seat.coach);
                }
                return;
            }
        }
        System.out.println("No booking found for " + passengerName);
    }
}

public class TrainBookingSystem {
    static List<Train> trains = new ArrayList<>();

    public static void main(String[] args) {
        initializeTrains();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nTrain Booking System");
            System.out.println("1. View Trains");
            System.out.println("2. View Train Status");
            System.out.println("3. Book Ticket");
            System.out.println("4. Cancel Ticket");
            System.out.println("5. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); 

            switch (choice) {
                case 1:
                    displayTrains();
                    break;
                case 2:
                    viewTrainStatus(scanner);
                    break;
                case 3:
                    bookTicket(scanner);
                    break;
                case 4:
                    cancelTicket(scanner);
                    break;
                case 5:
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid choice! Try again.");
            }
        }
    }

    private static void initializeTrains() {
        Map<String, String> timings1 = new LinkedHashMap<>();
        timings1.put("City A", "Departure: 06:00 AM");
        timings1.put("City B", "Arrival: 08:00 AM, Departure: 08:30 AM");
        timings1.put("City C", "Arrival: 10:00 AM, Departure: 10:15 AM");
        timings1.put("City D", "Arrival: 12:00 PM");

        Map<String, String> timings2 = new LinkedHashMap<>();
        timings2.put("City A", "Departure: 07:00 AM");
        timings2.put("City C", "Arrival: 09:30 AM, Departure: 09:45 AM");
        timings2.put("City D", "Arrival: 11:15 AM, Departure: 11:30 AM");
        timings2.put("City E", "Arrival: 01:00 PM");

        trains.add(new Train(101, "Express A", "City A", "City D", timings1));
        trains.add(new Train(102, "Superfast B", "City A", "City E", timings2));
    }

    private static void displayTrains() {
        System.out.println("\nAvailable Trains:");
        for (Train train : trains) {
            System.out.println(train.trainNumber + " - " + train.trainName + " (" + train.startStation + " → " + train.endStation + ")");
        }
    }

    private static void viewTrainStatus(Scanner scanner) {
        System.out.print("\nEnter Train Number: ");
        int trainNumber = scanner.nextInt();

        for (Train train : trains) {
            if (train.trainNumber == trainNumber) {
                train.displayStatus();
                return;
            }
        }
        System.out.println("Train not found.");
    }

    private static void bookTicket(Scanner scanner) {
        System.out.print("\nEnter Passenger Name: ");
        String name = scanner.nextLine();

        System.out.print("Enter Train Number: ");
        int trainNumber = scanner.nextInt();

        for (Train train : trains) {
            if (train.trainNumber == trainNumber) {
                train.bookTicket(name);
                return;
            }
        }
        System.out.println("Invalid Train Number.");
    }

    private static void cancelTicket(Scanner scanner) {
        System.out.print("\nEnter Passenger Name: ");
        String name = scanner.nextLine();

        for (Train train : trains) {
            train.cancelTicket(name);
        }
    }
}
